<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="http://stormphoenix.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="http://stormphoenix.github.io/" rel="alternate" type="text/html" /><updated>2021-09-23T14:56:24+08:00</updated><id>http://stormphoenix.github.io/feed.xml</id><title type="html">StormPhoenix</title><subtitle>Computer Graphics is awesome !</subtitle><entry><title type="html">如何在 Github Pages 中配置 Latex</title><link href="http://stormphoenix.github.io/Config_Latex" rel="alternate" type="text/html" title="如何在 Github Pages 中配置 Latex" /><published>2021-09-23T12:51:46+08:00</published><updated>2021-09-23T12:51:46+08:00</updated><id>http://stormphoenix.github.io/Config_Latex</id><content type="html" xml:base="http://stormphoenix.github.io/Config_Latex">&lt;h3 id=&quot;配置环境&quot;&gt;配置环境&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;OS：macOS Catalina&lt;/li&gt;
  &lt;li&gt;Github pages 构建工具：jekyll&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我自己试了三种方法，最后一种直接在本地用 MathJax javascript 库解析 LaTeX 效果是最好的。&lt;/p&gt;

&lt;h3 id=&quot;用-jekyll-spaceship-插件处理-latex-语法&quot;&gt;用 jekyll-spaceship 插件处理 LaTeX 语法&lt;/h3&gt;

&lt;p&gt;之前没接触过 ruby 语言，对 jekyll 的执行流不太清楚。这次借机会把 ruby \ rvm \ gem \ bundle 之间的关系理了一下。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ruby： 一种脚本语言&lt;/li&gt;
  &lt;li&gt;rvm：ruby 版本管理工具&lt;/li&gt;
  &lt;li&gt;gem：全局包管理器，管理 ruby 库的版本、依赖关系&lt;/li&gt;
  &lt;li&gt;bundle： 项目中的包管理器。有了 bundle，每个 ruby 项目都可以管理同版本的 ruby 库&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;gem 可以理解为全局的包管理器，而 bundle 理解为项目级别的包管理器。一个项目可以是一个文件夹下面的所有内容。而 bundle 又是通过项目下面的 Gemfile / Gemfile.lock 文件起作用的。&lt;/p&gt;

&lt;p&gt;转入正题，jekyll-spaceship 是 jekyll 下的插件（本质上也是一个 ruby 库），功能很多，包括了处理 LaTeX 语法。而一个 github pages 本质上是一个项目，可以用 bundle 管理 jekyll-spaceship 插件。&lt;/p&gt;

&lt;p&gt;在 Gemfile 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;group&lt;/code&gt; 标签添加 jekyll-spaceship 库：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;group :jekyll_plugins do
  gem 'jekyll-spaceship'
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;运行 bundle，bundle 会检查 Gemfile 配置更新项目依赖的库：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装过程如果无误，那么配置就完成了，可直接在 markdown 里编写 LaTeX 代码。&lt;/p&gt;

&lt;p&gt;缺点：jekyll 项目在本地运行可以完美解析 LaTeX 语法，但上传到 github pages 就不行了，猜测是 github 在构建 jekyll 项目时是没有 jekyll-spaceship 插件的。&lt;/p&gt;

&lt;h3 id=&quot;cdn-分发-mathjaxjs&quot;&gt;CDN 分发 MathJax.js&lt;/h3&gt;

&lt;p&gt;这种方法最方便简洁，在每篇 post 之前插入下面这行代码即可：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script type=&quot;text/javascript&quot; async src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这段链接会指向一个 CDN 分发服务，将最新的 MathJax Js 库 发送到本地用于 LaTeX 渲染。&lt;/p&gt;

&lt;p&gt;缺点：虽然做起来很简单，但每次打开新 post 都会重新加载这段代码，引起不必要的网络开销，网页会卡上一会。&lt;/p&gt;

&lt;h3 id=&quot;本地添加-mathjax-库&quot;&gt;本地添加 MathJax 库&lt;/h3&gt;

&lt;p&gt;用 CDN 分发服务会让网页卡顿，所以我考虑将 MathJax Js 库全部存放到本地 js 文件夹。这里参考了 &lt;a href=&quot;https://docs.mathjax.org/en/latest/web/hosting.html&quot;&gt;Hosting Your Own Copy of MathJax&lt;/a&gt; 这篇文章。首先将已经编译发布的 MathJax 库用 npm 工具下载下来：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install mathjax@3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;npm 的执行目录下会出现 node_modules 文件夹，里面存放着 mathjax/es5，es5 文件夹里面有着所有编译发布好的 mathjax 库。然后，在 github pages 的 /js 目录下建立 mathjax 文件夹，把 mathjax/es5 里面的 mathjax 库复制过来。&lt;/p&gt;

&lt;p&gt;最后一步，依然是在每片 post 之前插入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签，引用 /js 下的 mathjax，如下：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script src=&quot;/js/mathjax/tex-chtml.js&quot; id=&quot;MathJax-script&quot; async&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;至此可以完美解析 LaTeX 语法，网页加载速度也很快。&lt;/p&gt;</content><author><name></name></author><category term="blog" /><summary type="html">配置环境</summary></entry><entry><title type="html">GAMES202 Real-Time Shadow Mapping</title><link href="http://stormphoenix.github.io/GAMES202_Lecture_03" rel="alternate" type="text/html" title="GAMES202 Real-Time Shadow Mapping" /><published>2021-09-20T12:25:50+08:00</published><updated>2021-09-20T12:25:50+08:00</updated><id>http://stormphoenix.github.io/GAMES202_Lecture_03</id><content type="html" xml:base="http://stormphoenix.github.io/GAMES202_Lecture_03">&lt;h3 id=&quot;real-time-shadow-mapping&quot;&gt;Real-Time Shadow Mapping&lt;/h3&gt;

&lt;p&gt;一种在实时渲染中生成阴影的算法，后文用 SM 代替 Shadow Mapping&lt;/p&gt;

&lt;h3 id=&quot;sm-有什么用&quot;&gt;SM 有什么用&lt;/h3&gt;

&lt;p&gt;用来在实时渲染中生成阴影。&lt;/p&gt;

&lt;p&gt;对比离线渲染，离线渲染是没有单独考虑如何生成阴影的。因为场景中点 p 的光照强弱是由四面八方的 Radiance 决定的（按照渲染方程计算）。首先光线的传播、光强损失是遵循物理的，p 点如果被遮挡的多，那么传播到 p 点的光线就少、光强就弱，反之光线就多，光强就强。所以理论上 p 点计算的光强就应该和实际情况一致，不需要把阴影作为一个特殊的 case 考虑。&lt;/p&gt;

&lt;p&gt;还是前文提到过的，实时渲染需要的是性能，要在极短的事件内计算出结果，采用光线追踪肯定是不可行的。如果能够知道场景中物体的空间结构以及光源位置，那么阴影覆盖区域是可以提前计算的。&lt;/p&gt;

&lt;p&gt;所以 SM 的思路就是：先计算场景“遮挡关系”，后续渲染流程就根据计算好的“遮挡关系”来判断某一点 p 是否被遮挡，如果遮挡就认为 p 点处有阴影。&lt;/p&gt;

&lt;h3 id=&quot;shadow-mapping&quot;&gt;Shadow Mapping&lt;/h3&gt;

&lt;p&gt;RTR 中有一个可以用来表示场景 “遮挡关系” 的东西 - 相机拍摄的深度信息。而在 OpenGL 渲染管线中有一个可以用来存储深度信息的技术 - &lt;a href=&quot;https://learnopengl-cn.github.io/04%20Advanced%20OpenGL/05%20Framebuffers/&quot;&gt;帧缓冲&lt;/a&gt;，帧缓冲具体是什么可以在学习 OpenGL 时了解，这里只需要知道它是用来存储场景到相机的深度信息。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/RTR/Render_from_Light.jpeg&quot; alt=&quot;Render from Light&quot; height=&quot;70%&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;深度信息图示：
&lt;img src=&quot;/images/RTR/Depth_Texture.jpg&quot; alt=&quot;Depth texture&quot; height=&quot;70%&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们考虑场景里有一个点光源，假设在点光源处放置一个相机去拍摄整个场景，得到这个相机视角下场景的深度信息。这块深度信息将被存储到一块 depth texture 纹理里面，供算法后续使用。至此，SM 算法第一阶段完成（称之为第一个 Pass）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/RTR/Render_from_Eye.jpeg&quot; alt=&quot;Render from Eye&quot; height=&quot;70%&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;将相机转移至 eye 处进行拍摄渲染，为了方便称呼，我们把场景中每个需要渲染的点称之为 shading point。&lt;/p&gt;

&lt;p&gt;此时可以得到两个信息：一幅没有阴影的渲染图像、从上个 pass 传递过来的 depth texture。我们知道 depth texture 保存的是光源视角下拍摄的深度信息，为了在相机视角下确定某个位置是否被遮挡，只需将 shading point 到光源的深度和 depth texture 记录的深度进行比较，如果比记录的深度大，说明该 shading point 被遮挡。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/RTR/SM_Results.jpeg&quot; alt=&quot;Shadow Mapping Results&quot; height=&quot;70%&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;sm-存在的问题&quot;&gt;SM 存在的问题&lt;/h3&gt;

&lt;p&gt;SM 算法实际应用下至少会有三个问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;锯齿状阴影&lt;/li&gt;
  &lt;li&gt;自遮挡现象&lt;/li&gt;
  &lt;li&gt;只能渲染硬阴影&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;锯齿状阴影&quot;&gt;锯齿状阴影&lt;/h4&gt;

&lt;p&gt;阴影边缘出现锯齿状的原因在于 SM 的分辨率。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/RTR/Shadow_Map_Antianliasing.jpg&quot; alt=&quot;Shadow Map Antialiasing&quot; height=&quot;70%&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.download.nvidia.com/books/HTML/gpugems/gpugems_ch11.html&quot;&gt;Shadow Map Antialiasing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;理想情况下，SM 的深度图中，每个像素记录的应该是场景中每个点的深度，但 depth texture 存在分辨率的限制，所以实际上每个像素代表的不是场景中一个 “&lt;strong&gt;点&lt;/strong&gt;”，而是一块 “&lt;strong&gt;区域&lt;/strong&gt;”。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/RTR/SM_Resolution.jpeg&quot; alt=&quot;SM Resolution&quot; height=&quot;70%&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上图，因为 shadow map 分辨率的原因，反投影回地面区域的深度信息是离散、不连续的。一些不应该被遮挡的部分被 SM 判定为遮挡，展现出来就是阴影边缘的锯齿。一种解决办法是 PCF，在 shadow map 上做多次采样深度并加权，后文会提到。&lt;/p&gt;

&lt;h4 id=&quot;自遮挡现象self-occlusion&quot;&gt;自遮挡现象（Self occlusion）&lt;/h4&gt;

&lt;p&gt;自遮挡现象是指一些没有被遮挡的部位也出现了被遮挡现象。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/RTR/Self_occlusion.jpg&quot; alt=&quot;Self occlusion&quot; height=&quot;40%&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这张图渲染错误的地方是地板上出现的花纹状阴影。本质上和锯齿状阴影一样，是由 Shadow map 的分辨率不足引起的。&lt;/p&gt;

&lt;p&gt;Shadow map 上记录的深度是离散、不连续的，不能代表场景中任意位置的真实深度。因此从 Shadow map 采样得到的深度可能要比真实深度或大或小，之后的比较的结果会出错，让一些本来没有被遮挡的区域看起来被遮挡了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/RTR/Self_occlusion2.jpeg&quot; alt=&quot;Self occlusion 2&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;容易想到的解决方法：做深度判定的时候增加一个 bias 项，shadow map 记录的深度如果落在 bias 区间内则认为不存在遮挡。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/RTR/Self_occlusion_bias.jpeg&quot; alt=&quot;Self occlusion bias&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个方法引入了一个新问题：模型悬空。bias 是人为选取，那么选取多大的 bias 才是合适？bias 选取过大会让本应存在的遮挡关系被忽略，让物体看起来像是悬空。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/RTR/Self_occlusion_bias_detach.jpg&quot; alt=&quot;Self_occlusion_bias_detach&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;目前还没有更好的方法确定 bias 区间大小。工业界可能有一些动态更新 bias 大小的方法，但我还不太了解。&lt;/p&gt;

&lt;h4 id=&quot;只能渲染硬阴影&quot;&gt;只能渲染硬阴影&lt;/h4&gt;

&lt;p&gt;以上的 SM 模型是以点光源来构建的，阴影会有明显的边界。实际中大部分光源是面光源，阴影边界处会有明显的明暗过渡，如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/RTR/Soft_shadow.jpg&quot; alt=&quot;Soft shadow&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;直接将 SM 中的点光源模型替换成面光源是不可行的。因为拍摄 Shadow map 的相机可以摆放到点光源位置，如果是面光源，那相机应该摆放在何处？&lt;/p&gt;

&lt;p&gt;有一种解决办法也是利用 PCF。首先假设，如果 p 点被遮挡，那么深度比较结果为 1，反之为 0。现在依然以点光源为模型生成 Shadow map，不在处理阴影的时候多次采样深度比较，结果做加权，最终 p 点得到的结果将会介于 [0, 1] 之间，用这个结果来表示阴影软硬程度，后文将具体介绍。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/RTR/Conclusion.jpeg&quot; alt=&quot;Conclusion&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
pie title Pets adopted by volunteers
&quot;Dogs&quot; : 386
&quot;Cats&quot; : 85
&quot;Rats&quot; : 35
&lt;/div&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph LR
A[hard edge] --&amp;gt;B(Round edge)
&lt;/div&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph TD;
    A--&amp;gt;B;
    A--&amp;gt;C;
    B--&amp;gt;D;
    C--&amp;gt;D;
&lt;/div&gt;

&lt;h3 id=&quot;shadow-mapping-后的数学原理&quot;&gt;Shadow Mapping 后的数学原理&lt;/h3&gt;

&lt;p&gt;课程引入了一个重要的不等式：&lt;/p&gt;

\[\int_{\Omega} f(x)g(x)dx \approx \frac{\int_{\Omega} f(x)dx}{\int_{\Omega}dx} \cdot \int_{\Omega} g(x) dx\]

&lt;p&gt;成立条件：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; (1) g(x) 的 support（积分范围）足够小。
 (2) g(x) 足够 smooth（平滑）。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;引入这个公式的目的是为了说明：在实时渲染领域，任何 “近似相等” 都等价于 “相等”。将这个约等式应用于渲染方程，将方程内的 Visibility 项提到公式外部，如下：&lt;/p&gt;

\[L_o(p, \omega_o) = \int_{\Omega_{+}} L_i(p, \omega_i)f_r(p,\omega_i,\omega_o)\cos\theta_{i}V(p, \omega_i)d \omega_{i}\]

&lt;p&gt;Visibibity 项提取到外部&lt;/p&gt;

\[L_o(p, \omega_o) \approx \frac{\int_{\Omega+}V(p, \omega_i)d\omega_i}{\int_{\Omega+}d\omega_i} \int_{\Omega+}L_i(p, \omega_i) f_r(p, \omega_i, \omega_o) \cos \theta_i d\omega_i\]

&lt;p&gt;重新审视一下公式成立条件，看这个近似能不能成立。首先是&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; (1) g(x) 的 support（积分范围）足够小。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这要求公式左边的 Li 的积分范围足够小，对应到实际环境是要求光源必须是点光源。点光源相当于是空间中的一个点，体积很小，从 p 点看向光源的立体角 wi 也相对小。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; (2) g(x) 必须是 smooth 的
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这要求公示左边的 Li 和 BRDF 足够光滑。Li 足够光滑的情况是环境光、面光源，BRDF 必须是接近 diffuse 的。&lt;/p&gt;

&lt;p&gt;这么看来近似式成立的条件都可以在 RTR 中找到对应的场景，那么公式如此变换的物理含义是什么？我理解是这样的，把 Visibility 项提到积分号外单独做积分，实际上是计算点 p 的半球空间的阴影比例，也就是 “遮挡率”。公式最右边的积分可以不考虑 visibility 先计算出 shading 值，最后乘以 “遮挡率” 得到最终 shading 结果。&lt;/p&gt;

&lt;p&gt;如果 “遮挡率” 计算的值为 0，那么 shading point 被完全遮挡；为 1 说明 shading point 没有被遮挡；处于 (0, 1) 之间说明 p 点被部分遮挡，计算结果半明半暗，也就对应到 SM 中的软阴影部位。&lt;/p&gt;

&lt;p&gt;总结：在点光源、亮度平滑的面光源或 BRDF 足够平滑的情况下，shading 值可以通过独立计算 “遮挡率” 来表示明暗程度。那么接下来如何 “遮挡率” ？对 shading point 的半球面做积分太耗费时间，必定不可行。可能的方法只能在采样算法里面找，这就引出接下来的办法：PCF。&lt;/p&gt;

&lt;h3 id=&quot;percentage-closer-filter-pcf&quot;&gt;Percentage Closer Filter (PCF)&lt;/h3&gt;

&lt;p&gt;PCF：SM 做深度测试不仅仅只采样当前深度，还会采样周围深度值。&lt;/p&gt;

&lt;h3 id=&quot;percentage-closer-soft-shadows-pcss&quot;&gt;Percentage Closer Soft Shadows (PCSS)&lt;/h3&gt;</content><author><name></name></author><category term="blog" /><summary type="html">Real-Time Shadow Mapping</summary></entry><entry><title type="html">GAMES202 CG Basics</title><link href="http://stormphoenix.github.io/GAMES202_Lecture_02" rel="alternate" type="text/html" title="GAMES202 CG Basics" /><published>2021-09-18T21:01:55+08:00</published><updated>2021-09-18T21:01:55+08:00</updated><id>http://stormphoenix.github.io/GAMES202_Lecture_02</id><content type="html" xml:base="http://stormphoenix.github.io/GAMES202_Lecture_02">&lt;h3 id=&quot;rendering-equation&quot;&gt;Rendering Equation&lt;/h3&gt;

&lt;p&gt;课程前半部分是关于 OpenGL 渲染管线的回顾，这一块之前学过就不记录了。这里给推荐一个不错的 &lt;a href=&quot;https://learnopengl-cn.github.io&quot;&gt;OpenGL 入门教程&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;但是，后半部分提到的 Rendering Equation 很重要。离线渲染（offline rendering）中渲染方程的形式如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Rendering_Equation.jpeg&quot; alt=&quot;Rendering Equation&quot; height=&quot;70%&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;对应到 RTR（Real-Time rendering） 领域是另外一个形式：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Rendering_Equation_RTR.jpg&quot; alt=&quot;Rendering Equation in RTR&quot; height=&quot;70%&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;RTR 的渲染方程和离线渲染至少有两处不同：&lt;/p&gt;

&lt;h5 id=&quot;irradiance-term&quot;&gt;Irradiance term&lt;/h5&gt;

&lt;p&gt;在 offline rendering 中，Li 是指从任意方向投射到 p 点处的光线携带的能量（irradiance），这个光线可以是直接光照、经过多次散射的光照。而在 RTR 中，L 指的是广义上的光源，包括：environment lighting（环境光照）、Direct illumination（直接光照明）和 one bounce illumination（一次散射光照明）。&lt;/p&gt;

&lt;p&gt;可以发现， RTR 为了减少计算量，在渲染流程中忽略了 multi-bounce illumination 的计算。这基于一个重要的理论：通常 multi-bounce illumination 携带的能量对于最终成像效果贡献是很小的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一次散射结果&lt;/strong&gt; -&amp;gt;
&lt;img src=&quot;/images/One-bounce_global_illumination.jpeg&quot; alt=&quot;One-bounce global illumination&quot; height=&quot;70%&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;二次散射结果&lt;/strong&gt; -&amp;gt;
&lt;img src=&quot;/images/Two-bounce_global_illumination.jpeg&quot; alt=&quot;Two-bounce global illumination&quot; height=&quot;70%&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上图：光线散射次数分别为1次和2次，从视觉上看渲染结果区别不是很大（除了背光面），就是因为经过二次 散射的光线携带的能量贡献较小，随着散射次数增加，这个能量会小到可以忽略。&lt;/p&gt;

&lt;p&gt;结论就是： RTR 实际上是在“性能”和“渲染质量” 上做了一个权衡，只计算直接光照明和一次散射光照明，多次散射的计算用环境光照明代替。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;环境光照明&lt;/strong&gt; -&amp;gt;
&lt;img src=&quot;/images/Environment_lighting.jpeg&quot; alt=&quot;Environment lighting&quot; height=&quot;70%&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;visibility-term&quot;&gt;Visibility term&lt;/h5&gt;

&lt;p&gt;这个很好理解，由于 RTR 将 Li 看做成广义的“光源”，而场景是存在遮挡的，所以 RTR 中加上了 visibility term 表示 p 点和“光源” 之间的遮挡关系。&lt;/p&gt;

&lt;p&gt;以上。&lt;/p&gt;</content><author><name></name></author><category term="blog" /><summary type="html">Rendering Equation</summary></entry><entry><title type="html">GAMES202 Introduction and Overview</title><link href="http://stormphoenix.github.io/GAMES202_Lecture_01" rel="alternate" type="text/html" title="GAMES202 Introduction and Overview" /><published>2021-09-17T17:44:30+08:00</published><updated>2021-09-17T17:44:30+08:00</updated><id>http://stormphoenix.github.io/GAMES202_Lecture_01</id><content type="html" xml:base="http://stormphoenix.github.io/GAMES202_Lecture_01">&lt;h3 id=&quot;课程大纲&quot;&gt;课程大纲&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Lecture 01 没有讲具体知识点，只是对后续课程内容做了一个概览。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Real-Time High Quality Rendering 要实现的目标
    &lt;ul&gt;
      &lt;li&gt;Real-Time 做到实时渲染&lt;/li&gt;
      &lt;li&gt;High Quality 保证渲染质量&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;RTR 四大模块
    &lt;ul&gt;
      &lt;li&gt;阴影、环境光（Shadows and Environment Mapping）&lt;/li&gt;
      &lt;li&gt;全局光照（Scene / Image Space Precomputation)&lt;/li&gt;
      &lt;li&gt;基于物理的渲染（Physically-based Shading）&lt;/li&gt;
      &lt;li&gt;实时光线追踪 (Real-Time Ray Tracing)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;课程内容
    &lt;ul&gt;
      &lt;li&gt;Shadow and Environment Mapping&lt;/li&gt;
      &lt;li&gt;Interactive Global Illumination&lt;/li&gt;
      &lt;li&gt;Precomputed Radiance Transfer&lt;/li&gt;
      &lt;li&gt;Real-Time Ray Tracing&lt;/li&gt;
      &lt;li&gt;Participating Media&lt;/li&gt;
      &lt;li&gt;Image space Effect&lt;/li&gt;
      &lt;li&gt;NPR (Non-Photorealistic Rendering) 非真实感渲染&lt;/li&gt;
      &lt;li&gt;Antialiasing and supersampling
（此处有提到提到顾显峰的：&lt;a href=&quot;https://www.bilibili.com/video/av796221315/&quot;&gt;几何图像、虚拟模拟&lt;/a&gt;）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;相关参考资料
    &lt;ul&gt;
      &lt;li&gt;SIGGRAPH Course + 引擎设计文档&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;图形学几个里程碑事件
    &lt;ul&gt;
      &lt;li&gt;可编程图形硬件出现（Shaders）&lt;/li&gt;
      &lt;li&gt;可编程渲染管线被研发出来（Shaders）&lt;/li&gt;
      &lt;li&gt;基于预计算的方法被剔除
        &lt;ul&gt;
          &lt;li&gt;复杂的视觉效果预先计算出来，实际运行期间直接使用预计算结果（eg：relighting）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;可交互式的光线追踪。以低采样率在每个像素上采样，通过后处理降噪。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="blog" /><summary type="html">课程大纲</summary></entry><entry><title type="html">人是怎么废掉的</title><link href="http://stormphoenix.github.io/thinking" rel="alternate" type="text/html" title="人是怎么废掉的" /><published>2020-11-25T22:21:29+08:00</published><updated>2020-11-25T22:21:29+08:00</updated><id>http://stormphoenix.github.io/thinking</id><content type="html" xml:base="http://stormphoenix.github.io/thinking">&lt;p&gt;转载：&lt;/p&gt;

&lt;p&gt;最主要的原因是缺少独立而深入的思考能力，有的人为了逃避思考宁可做任何重复，无意义，低效的事情，表面上看起来忙忙碌碌，其实是在做布朗运动。另外一些人做的思考类似膝跳反射，纯粹应激反应，长期用这种方式待人接物处事而不自知，长期看毫无进益，蹉跎岁月。有的人会说自己有较好的思考能力，但缺少执行力，懒。其实本质上还是思考不够深入和清晰，只是有一个模糊的想法，自己也不确信，所以缺少执行力。&lt;/p&gt;

&lt;p&gt;例如和人沟通的时候，说的话根本不过脑子，不去思考对方的意图。工作学习中遇到问题，只想快点摆脱问题，而不愿深入思考问题是怎么产生的，该如何避免，不做深入思考，只是事来了，处理下，做一天和尚撞一天钟。&lt;/p&gt;

&lt;p&gt;多反思，多总结，最好写下来，然后指导实践。我发现有件事很适合锻炼这种思考习惯—-投资，以前投资股票，看了一堆巴菲特，林奇，但是股票老是赔钱，赔钱刺激自己反思，我会认真写下自己买入和卖出股票的理由，然后不断总结反思修正，形成自己的方法论和思考习惯，最终获取了丰厚的回报。&lt;/p&gt;</content><author><name></name></author><category term="life" /><summary type="html">转载：</summary></entry><entry><title type="html">知乎回答-如何看待华中师范大学的戴建业教授</title><link href="http://stormphoenix.github.io/zhihu-anser" rel="alternate" type="text/html" title="知乎回答-如何看待华中师范大学的戴建业教授" /><published>2020-11-24T20:43:59+08:00</published><updated>2020-11-24T20:43:59+08:00</updated><id>http://stormphoenix.github.io/zhihu-anser</id><content type="html" xml:base="http://stormphoenix.github.io/zhihu-anser">&lt;p&gt;转载自知乎用户 &lt;a href=&quot;https://www.zhihu.com/people/zhou-da-da-43-53&quot;&gt;@渡海平山&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;8000+的点赞数，3000+的评论，就这么被删了，到底是谁不让说话了？看样子我写的回答证明了某些人的心虚。评论区当中某些人的言论恰恰反应了我们国家的言论自由，我开着评论区就是为了让那些妖魔鬼怪原形毕露，有人劝我说不要和那些人争论，可是意识形态的高地文化的高地，你不去占领敌人就去占领。他可以在某些时间段内欺骗所有人，他可以在所有的时间段内欺骗一部分人，但是我不相信他可以在所有的时间段内欺骗所有人。&lt;/p&gt;

&lt;p&gt;作者：渡海平山
链接：https://www.zhihu.com/question/300305136/answer/1592224387
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/zhihu/ans1.jpeg&quot; alt=&quot;图片&quot; /&gt;&lt;/p&gt;

&lt;p&gt;转载自知乎匿名用户&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1Si4y1V7kb?p=1&amp;amp;share_medium=android&amp;amp;share_plat=android&amp;amp;share_source=COPY&amp;amp;share_tag=s_i&amp;amp;timestamp=1606311190&amp;amp;unique_k=MHPAiw&quot;&gt;大家来看一看这个！！&lt;/a&gt;（这个就是我上传的）之前的链接都神秘失踪了，咱也不敢问为什么。但是我重新在b站上传了，就是上一段的链接，要是还不行可以移步评论区的置顶。还是那句话，戴老师有说的资格，我们有评价的资格！在一分四十来秒，听到二分十秒就知道这个老师的真面目了。后面的我没听，怕恶心到我自己，想来后面也会有不少私货吧，潜移默化误导学生，这种老师想想就恐怖。既然戴老师有勇气说，那大家也有公开品一品的资格，删了多没意思。补充，咏梅这首诗是写于61年。&lt;/p&gt;

&lt;p&gt;作者：匿名用户
链接：https://www.zhihu.com/question/300305136/answer/1591522648
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/zhihu/ans2.jpeg&quot; alt=&quot;图片&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="life" /><summary type="html">转载自知乎用户 @渡海平山</summary></entry><entry><title type="html">谁是最可爱的人</title><link href="http://stormphoenix.github.io/%E8%B0%81%E6%98%AF%E6%9C%80%E5%8F%AF%E7%88%B1%E7%9A%84%E4%BA%BA" rel="alternate" type="text/html" title="谁是最可爱的人" /><published>2020-08-03T19:34:46+08:00</published><updated>2020-08-03T19:34:46+08:00</updated><id>http://stormphoenix.github.io/%E8%B0%81%E6%98%AF%E6%9C%80%E5%8F%AF%E7%88%B1%E7%9A%84%E4%BA%BA</id><content type="html" xml:base="http://stormphoenix.github.io/%E8%B0%81%E6%98%AF%E6%9C%80%E5%8F%AF%E7%88%B1%E7%9A%84%E4%BA%BA">&lt;center&gt;作者：魏巍&lt;/center&gt;

&lt;p&gt;在朝鲜的每一天，我都被一些东西感动着；我的思想感情的潮水，在放纵奔流着；我想把一切东西都告诉给我祖国的朋友们。但我最急于告诉你们的，是我思想感情的一段重要经历，这就是：我越来越深刻地感觉到谁是我们最可爱的人！&lt;/p&gt;

&lt;p&gt;谁是我们最可爱的人呢？我们的战士，我感到他们是最可爱的人。&lt;/p&gt;

&lt;p&gt;也许还有人心里隐隐约约地说：你说的就是那些“兵”吗？他们看来是很平凡、很简单的哩，既看不出他们有什么高深的知识，又看不出他们有什么丰富的感情。可是，我要说，这是由于他跟我们的战士接触太少，还没有了解我们的战士：他们的品质是那样的纯洁和高尚，他们的意志是那样的坚韧和刚强，他们的气质是那样的淳朴和谦逊，他们的胸怀是那样的美丽和宽广！&lt;/p&gt;

&lt;p&gt;让我还是来说一段故事吧。&lt;/p&gt;

&lt;p&gt;还是在二次战役的时候，有一支志愿军的部队向敌后猛插，去切断军隅里敌人的逃路。当他们赶到书堂站时，逃敌也恰恰赶到那里，眼看就要从汽车路上开过去。这支部队的先头边就匆匆占领了汽车路边一个很低的光光的小山冈，阻住敌人。一场壮烈的搏斗就开始了。敌人为了逃命，用了32架飞机、10多辆坦克发起集团冲锋，向这个连的阵地汹涌卷来，整个山顶的土都被打翻了，汽油弹的火焰把这个阵地烧红了。但是，勇士们在这烟与火的山冈上，高喊着口号，一次又一次把敌人打死在阵地前面。敌人的死尸像谷个子似的在山前堆满了，血也把这山冈流红了。可是敌人还是要拼死争夺，好使自己的主力不致覆灭。这场激战整整持续了八个小时。最后，勇士们的了弹打光了。蜂拥上来的敌人占领了山头，把他们压到山脚。飞机掷下的汽油弹把他们的身上烧着了火。这时候，勇士们是仍然不会后退的呀，他们把枪一摔，向敌人扑去，身上帽子上呼呼地冒着火苗，把敌人抱住，让身上的火，也把占领阵地的敌人烧死。……据这个营的营长告诉我，战后，这个连的阵地上，枪支完全摔碎了，机枪零件扔得满山都是。烈士们的遗体，保留着各种各样的姿势，。有抱住敌人腰的，有抱住敌人头的，有掐住敌人脖子把敌人摁倒在地上的，和敌人倒在一起，烧在一起。有一个战士，他手里还紧握着一个手榴弹，弹体上沾满脑浆；和他死在一起的美国鬼子，脑浆迸裂，涂了一地。另一个战士，嘴里还衔着敌人的半块耳朵。在掩埋烈士遗体的时候，由于他们两手扣着，把敌人抱得那样紧，分都分不开，以致把有些人的手指都掰断了。……这个连虽然伤亡很大，他们却打死了300多敌人，更重要的，他们使得我们部队的主力赶上来，聚歼了敌人。&lt;/p&gt;

&lt;p&gt;这就是朝鲜战场上一次最壮烈的战头——松骨峰战斗，或者叫书堂站战斗。假若需要立纪念碑的话，让我把带火扑敌和用刺刀跟敌人拼死在一起的烈士们的名字记下吧。他们的名字是：王金传、邢玉堂、王文英、熊官全、王金侯、赵锡杰、隋金山、李玉安、丁振岱、张贵生、崔玉亮、李树国。还有一个战士，已经不可能知道他的名字了。让我们的烈士们千载万世永垂不朽吧！&lt;/p&gt;

&lt;p&gt;这个营的营长向我叙说了以上的情形，他的声调是缓慢的，他的感情是沉重的。他说在阵地上掩埋烈士的时候，他掉了眼泪。但是，他接着说：“你不要以为我是为他们伤心，不，我是为他们骄傲！我觉得我们的战士太伟大了，太可爱了，我不能不被他们感动得掉下泪来。”&lt;/p&gt;

&lt;p&gt;朋友，当你听到这段英雄事迹的时候，你的感想如何呢？你不觉得我们的战士是可爱的吗？你不以我们的祖国有着这样的英雄而自豪吗？&lt;/p&gt;

&lt;p&gt;我们的战士，对敌人这样狠，而对朝鲜人民却是那样的爱，充满国际主义的深厚热情。&lt;/p&gt;

&lt;p&gt;在汉江北岸，我遇到一个青年战士，他今年才21岁，名叫马玉祥，是黑龙江青冈县人。他长着一副微黑透红的脸膛，高高的个儿，站在那儿，像秋天田野里一株红高粱那样淳朴可爱。不过因为他才从阵地上下来，显得稍微疲劳些，眼里的红丝还没有退净。他原来是炮兵连的。有一天夜里，他被一阵哭声惊醒了，出去一看，是一个朝鲜老妈妈坐在山冈上哭。原来她的房子被炸毁了，她在山里搭了个窝棚，窝棚又被炸毁了。回来，他马上到连部要求调到步兵连去，正好步兵连也需要人，就批准了他。我说：“在炮兵连不是一样打敌人吗？”“那，不同！”他说，“离敌人越近，越觉着打得过瘾，越觉着打得解恨！”&lt;/p&gt;

&lt;p&gt;在汉江南岸阻击敌人的日子里，有一天他从阵地上下来做饭。刚一进村，有几架敌机袭过来，打了一阵机关炮，接着就扔下了两个大燃烧弹。有几间房子着了火，火又盛，烟又大，使人不敢到跟前去。这时候，他听见烟火里有一个小孩子哇哇哭叫的声音。他马上穿过浓烟到近处一看，一个朝鲜的中年男人在院子里倒着，小孩子的哭声还在屋里。他走到屋门口，屋门口的火苗呼呼的，已经进不去人，门窗的纸已经烧着。小孩子的哭声随着那滚滚的浓烟传出来，听得真真切切。当他叙述到这里的时候，他说：“我能够不进去吗？我不能！我想，要在祖国遇见这种情形，我能够进去，那么，在朝鲜我就可以不进去吗？朝鲜人民和我们祖国的人民不是一样的吗？我就踹开门，扑了进去。呀！满屋子灰洞洞的烟，只能听见小孩哭，看不见人。我的眼也睁不开，脸烫得像刀割一般。我也不知道自己的身上着了火没有，我也不管它了，只是在地上乱摸。先摸着一个大人，拉了拉没拉动；又向大人的身后摸，才摸着小孩的腿，我就一把抓着抱起来，跳出门去。我一看小孩子，是挺好的一个小孩儿啊。他穿着小短褂儿，光着两条小腿儿，小腿儿乱蹬着，哇哇地哭。我心想：‘不管你哭不哭，不救活你家大人，谁养活你哩！’这时候，火更大了，屋子里的家具什物也烧着了。我就把他往地上一放，就又从那火门里钻了进去一拉那个大人，她哼了一声，我就使劲往外拉，见她又不动了。凑近一看，见她脸上流下来的血已经把她胸前的白衣染红了，眼睛已经闭上。我知道她不行了，才赶忙跳出门外，扑灭身上的火苗，抱起这个无父无母的孩子。……”&lt;/p&gt;

&lt;p&gt;朋友，当你听到这段事迹的时候，你的感觉又是如何呢？你不觉得我们的战士是最可爱的人吗？&lt;/p&gt;

&lt;p&gt;谁都知道，朝鲜战场是艰苦些。但战士们是怎样想的呢？有一次，我见到一个战士，在防空洞里，吃一口炒面，就一口雪。我问他：“你不觉得苦吗？”他把正送往嘴里的一勺雪收回来，笑了笑，说：“怎么能不觉得？我们革命军队又不是个怪物。不过我们的光荣也就在这里。”他把小勺儿干脆放下，兴奋地说，“就拿吃雪来说吧。我在这里吃雪，正是为了我们祖国的人民不吃雪。他们可以坐在挺豁亮的屋子里，泡上一壶茶，守住个小火炉子，想吃点什么就做点什么。”他又指了指狭小潮湿的防空洞说，“再比如蹲防熔洞吧，多憋闷得慌哩，眼看着外面好好的太阳不能晒，光光的马路不能走。可是我在这里蹲防空洞，祖国的人民就可以不蹲防空洞啊，他们就可以在马路上不慌不忙地走啊。他们想骑车子也行，想走路也行，边遛达边说话也行。只要能使人民得到幸福，就是我们最大的幸福。所以，”他又把雪放到嘴里，像总结似的说“我在这里流点血不算什么，吃这点苦又算什么哩！”我又问：“你想不想祖国啊？”他笑起来：“谁不想哩，说不想，那是假话，可是我不愿意回去。如果回去，祖国的老百姓问，‘我们托付给你们的任务完成得怎么样啦？’我怎么答对呢？我说‘朝鲜半边红，半边黑’，这算什么话呢？”我接着问：“你们经历了这么多危险，吃了这么多苦，你们对祖国对朝鲜有什么要求吗？”他想了一下，才回答我：“我们什么也不要。可是说心里话，——我这话可不一定恰当啊，我们是想要这么大的一个东西……”他笑着，用手指比个铜子儿大小，怕我不明白，“一块‘朝鲜解放纪念章’，我们愿意戴在胸脯上，回到咱们的祖国去。”&lt;/p&gt;

&lt;p&gt;朋友们，用不着多举例，你们已经可以了解我们的战士是怎样一种人，这种人有一种什么品质，他们的灵魂多么地美丽和宽广。他们是历史上、世界上第一流的战士，第一流的人！他们是世界上一切伟大人民的优秀之花！是我们值得骄傲，我们以我们的祖国有这样的英雄而骄傲，我们以生在这个英雄的国度而自豪！&lt;/p&gt;

&lt;p&gt;亲爱的朋友们，当你坐上早晨第一列电车驰向工厂的时候，当你扛上犁耙走向田野的时候，当你喝完一杯豆浆、提着书包走向学校的时候，当你坐到办公桌前开始这一天工作的时候，当你往孩子口里塞苹果的时候，当你和爱人一起散步的时候……朋友，你是否意识到你是在幸福之中呢？你也许很惊讶地说：“这是很平常的呀！”可是，从朝鲜归来的人，会知道你正生活在幸福中。请你意识到这是一种幸福吧，因为只有你意识到这一点，你才能更深刻了解我们的战士在朝鲜奋不顾身的原因。朋友！你是这么爱我们的祖国，爱我们的伟大领袖毛主席，你一定会深深地爱我们的战士，——他们确实是我们最可爱的人！&lt;/p&gt;</content><author><name></name></author><category term="life" /><summary type="html">作者：魏巍</summary></entry><entry><title type="html">2020年书单</title><link href="http://stormphoenix.github.io/book-list-for-2020" rel="alternate" type="text/html" title="2020年书单" /><published>2020-06-14T01:13:00+08:00</published><updated>2020-06-14T01:13:00+08:00</updated><id>http://stormphoenix.github.io/book-list-for-2020</id><content type="html" xml:base="http://stormphoenix.github.io/book-list-for-2020">&lt;ul&gt;
  &lt;li&gt;《看见》&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="books" /><summary type="html">《看见》</summary></entry><entry><title type="html">北大那些事（二）一年之后</title><link href="http://stormphoenix.github.io/pku-things-2" rel="alternate" type="text/html" title="北大那些事（二）一年之后" /><published>2020-06-12T01:47:44+08:00</published><updated>2020-06-12T01:47:44+08:00</updated><id>http://stormphoenix.github.io/pku-things-2</id><content type="html" xml:base="http://stormphoenix.github.io/pku-things-2">&lt;p&gt;没想到距离上篇文章已经过去一年了。&lt;/p&gt;

&lt;p&gt;2020年是一个神奇的年份，新冠全球爆发，国内二月份全面封城，到现在已经有快半年的时间了。回想过去在北大的一年，给自己的总结是：没有学到多少东西。&lt;/p&gt;

&lt;p&gt;没学到多少东西这件事情怪不得别人，说到底其实还是自己的原因。一门研究生课程想要学好，单单靠课堂的50十分钟是完全不够的，掌握整个知识体系需要课后花费精力读书做实验才行。有一门课程《三维重建》，内容包括3D空间几何、SfM，我自认为对课上原理推导已经理解的很清楚了，但现在回想这门课程我却完全想不起来这门课教了什么。尤其是今天晚上汇报的时候，有一个同学汇报主题是 – 利用强化学习对图像去燥。《强化学习》这门课程我是学过的，但那时我能够想起的只有 “q-value”、“Action” 和 “Reward” 这几个概念，其他内容早已忘的一干二净。&lt;/p&gt;

&lt;p&gt;最近有一个老乡保送北大数学博士，他叫&lt;a href=&quot;https://www.thepaper.cn/newsDetail_forward_7408752&quot;&gt;陈弈霖&lt;/a&gt;，我从高中就开始佩服这个人。他本科是武汉大学的，满GPA，每一门课程都达到了95分以上。就像法语、日语这种从来不重视的通识课程，他也能有90+。他就我的一个北大同学周仕林一样，做什么事情都很认真，学习知识无小事。前几天我翻开我的成绩单，没有一个A，我在想如果是陈弈霖，他是不是所有成绩都拿A+？。&lt;/p&gt;

&lt;p&gt;我这个人总是有一点形式主义，嘴上理论一套一套的，但是真的做起来就没有几样能够坚持下去。Linux内核、QinOS和编译器一直到现在都没有完成，昨天我才意识到QinOS已经有三个月没有更新了。拿到宿舍的《编译原理》、《SCIP》、《CSAPP》和《Deep Learning》就从来没翻开过。打算一个学习读完的文学作品到现在也没读完。研究生生涯已经过去了三分之一，时间已经没有多少了，我之前的所作所为对得起自己为了考上北大的付出吗？&lt;/p&gt;

&lt;p&gt;我对自己依然有信心，亡羊补牢为时不晚。从今天开始，制定计划，好好学习，重新做人。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Weiming_lake.jpg&quot; alt=&quot;图片&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="life" /><summary type="html">没想到距离上篇文章已经过去一年了。</summary></entry><entry><title type="html">北大那些事（一）复试</title><link href="http://stormphoenix.github.io/pku-things-1" rel="alternate" type="text/html" title="北大那些事（一）复试" /><published>2019-04-14T00:13:47+08:00</published><updated>2019-04-14T00:13:47+08:00</updated><id>http://stormphoenix.github.io/pku-things-1</id><content type="html" xml:base="http://stormphoenix.github.io/pku-things-1">&lt;p&gt;我的北大故事，应该从考研进入复试讲起。在去北京之前，我最担心的就是笔试，今年是信科在考研复试中第一次在所有计算机专业中加入笔试环节，事先也没有公布任何考试大纲。加入我在笔试这一环节不及格就会被淘汰，后续的自我表现就完全没有机会了。不过后来发现这种担心完全是多余的，事实证明，对于一个合格的程序员，北大的笔试其实没有任何难度，因此我也顺理成章的进入面试环节。&lt;/p&gt;

&lt;p&gt;面试要取得好成绩，要把握唯一一个要点：主动将话题向自己的长处引导。一般情况下，不论是公司，还是学校，面试官是希望发现面试者的优点的，所以尽量不要把自己的缺点暴露出来。针对这次面试我准备了两个方向:英语面试和简历。&lt;/p&gt;

&lt;p&gt;在准备英语自我介绍之前，我了解到的经验就是：语言真诚。网上很多英文自我介绍的模板已经很语言真诚了，背下来就可以对付大部分情况。按照这种方式准备，得到的效果其实一般，毕竟大家用到都是同一套模板，同样的“真诚“，所以有必要在英文自我介绍的时候加上一点自己的东西。比如，我提到自己偏爱科幻后，面试的老师和我讨论起了《流浪地球》，这恰好又给了我展示水平的机会。所以加入一些能引起老师的兴趣的点还是有必要的。&lt;/p&gt;

&lt;p&gt;其次，简历可以做很多文章，凡是能够表现自己长处的地方都写上去。比如GPA、项目经验、工作经历、科研成果以及GPA。虽说不同的老师看重不同的点，比如有的老师看重GPA，其他老师看重项目经验，那么吧这些都写上去是没有坏处。不过千万注意，自己写上去的一定要是自己熟悉的，为了增加履历而写自己不熟悉的项目无疑是给自己挖坑。比如我，对Linux内核、JVM还有软件工程比较熟悉，老师问到这些我都能应答自如。有人会问：如果自己大学一片空白，没有这些经历怎么办？我的答案是：初试结束后的两个月时间是你最好的机会！要利用好这段时间，没有项目，就自己造一个项目；没有研究过什么东西，就找个方向研究，两个月绰绰有余。最后，简历是用来凸显自己实力的，要写的简洁，一面纸概括完自己的情况，不需要像其他人一样打印好几页纸，弄得花里胡哨。&lt;/p&gt;

&lt;p&gt;我本科是华中农业大学，一个普通的211。但通过这次复试，我发现我的能力不比985高校学生差，甚至比大部分人还要强。同时我也知道，北大只是一个起点，距离领域前沿还有很大距离。务必保持谦虚谨慎，不骄不躁的作风，切记。&lt;/p&gt;</content><author><name></name></author><category term="life" /><summary type="html">我的北大故事，应该从考研进入复试讲起。在去北京之前，我最担心的就是笔试，今年是信科在考研复试中第一次在所有计算机专业中加入笔试环节，事先也没有公布任何考试大纲。加入我在笔试这一环节不及格就会被淘汰，后续的自我表现就完全没有机会了。不过后来发现这种担心完全是多余的，事实证明，对于一个合格的程序员，北大的笔试其实没有任何难度，因此我也顺理成章的进入面试环节。</summary></entry></feed>